package com.training.epam.Prj02;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.nio.file.InvalidPathException;
import java.util.ArrayList;
import java.util.List;

import com.training.epam.Prj02.entity.CatalWorker;
import com.training.epam.Prj02.entity.Song;

public class MainApp {

	public static void main(String[] args) {
	
//		BufferedReader reader = new BufferedReader (new InputStreamReader(System.in));
//		String path;
//		String insertedArgs;
//		String[] splitInsertedArgs;
//		 try {
//			 System.out.println("Enter one folder: like d:/music");
//			 insertedArgs = reader.readLine();
//			 splitInsertedArgs = insertedArgs.split(" ");
//			 
//				 if (splitInsertedArgs.length==1) {
//					 path = insertedArgs;
//			 } else {
//				 System.out.println("Please, enter one folder again like d:/music"); 
//				 }
//				 
//		File folder = new File (path);
		
		File folder = new File("d:/МИП хлам/интересное работа/музз/");
//		File folder = new File("d:/чертежи/КЖ.3/");

		CatalWorker catalWorker = new CatalWorker();
		List<File> result = new ArrayList<File>();
		List<Song> resultMP3 = new ArrayList<Song>();
		List<Song> songMP3 = new ArrayList<Song>();

		result = catalWorker.readCatalogue(folder);
		catalWorker.printCatalogue(result);

		resultMP3 = catalWorker.findMP3(result);
//		catalWorker.printCatalogueMP3(resultMP3);
		 catalWorker.writeHTMLCatalogue(resultMP3);
//		 catalWorker.listEqualCount(songMP3);

		// } catch (InvalidPathException e) {
		// e.printStackTrace();
		// }

		/**
		 * Задание 2. Написать каталогизатор mp3-файлов, который сканирует перечень
		 * указанных в командной строке каталогов с подкаталогами и создаёт
		 * HTML-документ в формате:
		 * 
		 * Исполнитель1 Альбом-1 Название-1 Длительность-1 (Ссылка на локальный файл)
		 * Название-2 Длительность-2 (Ссылка на локальный файл) Альбом-2 Название-1
		 * Длительность-1 (Ссылка на локальный файл) Название-2 Длительность-2 (Ссылка
		 * на локальный файл) Исполнитель2 Альбом-1 Название-1 Длительность-1 (Ссылка на
		 * локальный файл) Название-2 Длительность-2 (Ссылка на локальный файл) Альбом-2
		 * Название-1 Длительность-1 (Ссылка на локальный файл) Название-2
		 * Длительность-2 (Ссылка на локальный файл)
		 * 
		 * Также ваша программа должна обнаруживать и формировать два отдельных списка
		 * mp3-файлов (и логировать их с помощью Log4j2): 1) Полностью идентичных (по
		 * контрольной сумме), например:
		 * 
		 * Дубликаты-1: + Полный путь к файлу 1. + Полный путь к файлу 2. + Полный путь
		 * к файлу 3.
		 * 
		 * Дубликаты-2: + Полный путь к файлу A. + Полный путь к файлу B. + Полный путь
		 * к файлу C.
		 * 
		 * 2) Таких, у которых совпадают исполнитель, альбом и название композиции, даже
		 * если сами файлы различаются (контрольные суммы не совпадают), например:
		 * 
		 * Исполнитель A, Альбом X, Композиция N: + Полный путь к файлу 1. + Полный путь
		 * к файлу 2. + Полный путь к файлу 3.
		 * 
		 * Исполнитель B, Альбом Y, Композиция M: + Полный путь к файлу AAA. + Полный
		 * путь к файлу BBB. + Полный путь к файлу CCC. + Полный путь к файлу DDD.
		 * 
		 * В процессе выполнения этого задания максимальное внимание уделите обработке
		 * исключительных ситуаций (на уровне работы с файловой системой, на уровне
		 * анализа самих файлов и т.д. и т.п.)
		 **/
	}
}